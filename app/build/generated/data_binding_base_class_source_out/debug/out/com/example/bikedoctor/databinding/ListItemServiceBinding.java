// Generated by view binder compiler. Do not edit!
package com.example.bikedoctor.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.bikedoctor.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListItemServiceBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView clientCI;

  @NonNull
  public final TextView details;

  @NonNull
  public final TextView employeeCI;

  @NonNull
  public final TextView idService;

  @NonNull
  public final ImageView imageView14;

  @NonNull
  public final ImageView imageView16;

  @NonNull
  public final TextView motorcycleLicensePlate;

  private ListItemServiceBinding(@NonNull LinearLayout rootView, @NonNull TextView clientCI,
      @NonNull TextView details, @NonNull TextView employeeCI, @NonNull TextView idService,
      @NonNull ImageView imageView14, @NonNull ImageView imageView16,
      @NonNull TextView motorcycleLicensePlate) {
    this.rootView = rootView;
    this.clientCI = clientCI;
    this.details = details;
    this.employeeCI = employeeCI;
    this.idService = idService;
    this.imageView14 = imageView14;
    this.imageView16 = imageView16;
    this.motorcycleLicensePlate = motorcycleLicensePlate;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemServiceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemServiceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item_service, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemServiceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.clientCI;
      TextView clientCI = ViewBindings.findChildViewById(rootView, id);
      if (clientCI == null) {
        break missingId;
      }

      id = R.id.details;
      TextView details = ViewBindings.findChildViewById(rootView, id);
      if (details == null) {
        break missingId;
      }

      id = R.id.employeeCI;
      TextView employeeCI = ViewBindings.findChildViewById(rootView, id);
      if (employeeCI == null) {
        break missingId;
      }

      id = R.id.idService;
      TextView idService = ViewBindings.findChildViewById(rootView, id);
      if (idService == null) {
        break missingId;
      }

      id = R.id.imageView14;
      ImageView imageView14 = ViewBindings.findChildViewById(rootView, id);
      if (imageView14 == null) {
        break missingId;
      }

      id = R.id.imageView16;
      ImageView imageView16 = ViewBindings.findChildViewById(rootView, id);
      if (imageView16 == null) {
        break missingId;
      }

      id = R.id.motorcycleLicensePlate;
      TextView motorcycleLicensePlate = ViewBindings.findChildViewById(rootView, id);
      if (motorcycleLicensePlate == null) {
        break missingId;
      }

      return new ListItemServiceBinding((LinearLayout) rootView, clientCI, details, employeeCI,
          idService, imageView14, imageView16, motorcycleLicensePlate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
